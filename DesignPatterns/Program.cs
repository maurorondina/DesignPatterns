var pattern = DesignPatternEnum.MediatorWithObserver2; // Change this to the desired pattern

Action executePattern = pattern switch
{
    DesignPatternEnum.MementoBadExample => MementoBadExample.Run,
    DesignPatternEnum.MementoGoodExample => MementoGoodExample.Run,
    DesignPatternEnum.StateBadExample => StateBadExample.Run,
    DesignPatternEnum.StateGoodExample => StateGoodExample.Run,
    DesignPatternEnum.StrategyBadExample => () => StrategyBadExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.StrategyGoodExample => () => StrategyGoodExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.IteratorBadCode => IteratorBadCode.Run,
    DesignPatternEnum.IteratorGoodCode => IteratorGoodCode.Run,
    DesignPatternEnum.IteratorWithEnumerable => IteratorWithEnumerable.Run,
    DesignPatternEnum.CommandBadExample => CommandBadExample.Run,
    DesignPatternEnum.CommandGoodExample => CommandGoodExample.Run,
    DesignPatternEnum.TemplateBadExample => TemplateBadExample.Run,
    DesignPatternEnum.TemplateGoodExample => TemplateGoodExample.Run,
    DesignPatternEnum.ObserverBadExample => ObserverBadExample.Run,
    DesignPatternEnum.ObserverGoodExample => ObserverGoodExample.Run,
    DesignPatternEnum.MediatorBadExample => () => MediatorBadExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.MediatorGoodExample => () => MediatorGoodExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.MediatorWithObserver => () => MediatorWithObserver.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.MediatorWithObserver2 => () => MediatorWithObserver2.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.ChainOfResponsibilityBadExample => ChainOfResponsibilityBadExample.Run,
    DesignPatternEnum.ChainOfResponsibilityGoodExample => () => ChainOfResponsibilityGoodExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.VisitorBadExample => VisitorBadExample.Run,
    DesignPatternEnum.VisitorGoodExample => VisitorGoodExample.Run,
    DesignPatternEnum.PrototypeBadExample => PrototypeBadExample.Run,
    DesignPatternEnum.PrototypeGoodExample => PrototypeGoodExample.Run,
    DesignPatternEnum.PrototypeWithRegistry => PrototypeWithRegistry.Run,
    DesignPatternEnum.SingletonBadExample => SingletonBadExample.Run,
    DesignPatternEnum.SingletonGoodExample => SingletonGoodExample.Run,
    DesignPatternEnum.FacthoryMethodBadExample => FacthoryMethodBadExample.Run,
    DesignPatternEnum.FactoryMethodGoodExample => FactoryMethodGoodExample.Run,
    DesignPatternEnum.AbstractFactoryBadExample => AbstractFactoryBadExample.Run,
    DesignPatternEnum.AbstractFactoryGoodExample => AbstractFactoryGoodExample.Run,
    DesignPatternEnum.BuilderBadExample => BuilderBadExample.Run,
    DesignPatternEnum.BuilderGoodExample => BuilderGoodExample.Run,
    DesignPatternEnum.BuilderWithGenerics => BuilderWithGenerics.Run,
    DesignPatternEnum.CompositeBadExample => CompositeBadExample.Run,
    DesignPatternEnum.CompositeGoodExample => CompositeGoodExample.Run,
    DesignPatternEnum.AdapterBadExample => AdapterBadExample.Run,
    DesignPatternEnum.AdapterGoodExample => AdapterGoodExample.Run,
    DesignPatternEnum.BridgeBadExample => BridgeBadExample.Run,
    DesignPatternEnum.BridgeGoodExample => BridgeGoodExample.Run,
    DesignPatternEnum.ProxyBadExample => ProxyBadExample.Run,
    DesignPatternEnum.ProxyGoodExample => ProxyGoodExample.Run,
    DesignPatternEnum.FlyweightBadExample => FlyweightBadExample.Run,
    DesignPatternEnum.FlyweightGoodExample => FlyweightGoodExample.Run,
    DesignPatternEnum.FacadeBadExample => () => FacadeBadExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.FacadeGoodExample => () => FacadeGoodExample.RunAsync().GetAwaiter().GetResult(),
    DesignPatternEnum.DecoratorBadExample => DecoratorBadExample.Run,
    DesignPatternEnum.DecoratorGoodExample => DecoratorGoodExample.Run,
    _ => throw new ArgumentOutOfRangeException(nameof(pattern))
};

Console.Clear();
Console.ForegroundColor = ConsoleColor.Cyan;
Console.WriteLine($"Executing pattern: {pattern}\n");
executePattern();
Console.ResetColor();

public enum DesignPatternEnum
{
    MementoBadExample,
    MementoGoodExample,
    StateBadExample,
    StateGoodExample,
    StrategyBadExample,
    StrategyGoodExample,
    IteratorBadCode,
    IteratorGoodCode,
    IteratorWithEnumerable,
    CommandBadExample,
    CommandGoodExample,
    TemplateBadExample,
    TemplateGoodExample,
    ObserverBadExample,
    ObserverGoodExample,
    MediatorBadExample,
    MediatorGoodExample,
    MediatorWithObserver,
    MediatorWithObserver2,
    ChainOfResponsibilityBadExample,
    ChainOfResponsibilityGoodExample,
    VisitorBadExample,
    VisitorGoodExample,
    PrototypeBadExample,
    PrototypeGoodExample,
    PrototypeWithRegistry,
    SingletonBadExample,
    SingletonGoodExample,
    FacthoryMethodBadExample,
    FactoryMethodGoodExample,
    AbstractFactoryBadExample,
    AbstractFactoryGoodExample,
    BuilderBadExample,
    BuilderGoodExample,
    BuilderWithGenerics,
    CompositeBadExample,
    CompositeGoodExample,
    AdapterBadExample,
    AdapterGoodExample,
    BridgeBadExample,
    BridgeGoodExample,
    ProxyBadExample,
    ProxyGoodExample,
    FlyweightBadExample,
    FlyweightGoodExample,
    FacadeBadExample,
    FacadeGoodExample,
    DecoratorBadExample,
    DecoratorGoodExample,
}